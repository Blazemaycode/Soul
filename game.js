{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "    <canvas id=\"gameCanvas\" width=\"800\" height=\"600\"></canvas>\n",
      "status": "",
      "output": "    <canvas id=\"gameCanvas\" width=\"800\" height=\"600\"></canvas>\n",
      "type": "html"
    },
    {
      "code": "<style>\n  \n  #gamecanvas { \n    border: 5px solid black;\n    position: absolute;\n    top: 50%;\n    left: 5%;\n    transform: translate(-50%, -50%);\n    width: 600px;\n    height: 600px;\n    }\n\n body {\n            margin: 0;\n            padding: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-color: white;\n        }\n        canvas {\n            border: 1px solid black;\n            background-color: black;\n        }\n\n </style>",
      "status": "",
      "output": "<style>\n  \n  #gamecanvas { \n    border: 5px solid black;\n    position: absolute;\n    top: 50%;\n    left: 5%;\n    transform: translate(-50%, -50%);\n    width: 600px;\n    height: 600px;\n    }\n\n body {\n            margin: 0;\n            padding: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-color: white;\n        }\n        canvas {\n            border: 1px solid black;\n            background-color: black;\n        }\n\n </style>",
      "type": "html"
    },
    {
      "code": "const canvas = document.getElementById('gameCanvas');\nconst ctx = canvas.getContext('2d');\n\n// Game settings\nconst GRAVITY = 0.8;\nconst FRICTION = 0.9;\nconst JUMP_STRENGTH = -25;\nconst PLATFORM_GAP = 300;\nconst PLATFORM_WIDTH = 200;\nconst PLATFORM_HEIGHT = 20;\nconst SPAWN_DISTANCE = 800;\nconst ATTACK_RANGE = 80;\nconst MAX_ATTACK_OBJECTS = 5; // Limit the number of attack objects on screen\n\n// Variables that change during the game\nlet WIN_DISTANCE = 100;  // The distance at which the level increases (should be mutable)\nlet attackSpeedMultiplier = 1;  // Level 1 default attack speed multiplier\nlet spawnRateMultiplier = 1;    // Level 1 default spawn rate multiplier\nlet backgroundColor = 'black'; // Initial background color\n\n// Game objects\nconst player = {\n    x: 100,\n    y: canvas.height - 200,\n    width: 50,\n    height: 50,\n    speedX: 0,\n    speedY: 0,\n    color: 'white',\n    jumping: false,\n    grounded: false,\n    swordAngle: 0, // Angle for sword swing\n    swordSwinging: false, // Is the sword currently swinging\n    swordDirection: 1 // 1 for right, -1 for left (direction of swing)\n};\n\nlet platforms = [\n    { x: 0, y: canvas.height - 50, width: canvas.width, height: 50 },\n    { x: 200, y: canvas.height - 150, width: PLATFORM_WIDTH, height: PLATFORM_HEIGHT },\n    { x: 500, y: canvas.height - 250, width: PLATFORM_WIDTH, height: PLATFORM_HEIGHT }\n];\n\nlet attackObjects = []; // Array to store attack objects\n\nconst camera = {\n    x: 0,\n    y: 0,\n    width: canvas.width,\n    height: canvas.height,\n    speedX: 0\n};\n\nlet level = 1;\nlet distanceTraveled = 0;\nlet keys = { right: false, left: false, up: false, swing: false };\n\n// Difficulty adjustments\nconst LEVEL_UP_DISTANCE = 100; // Distance at which level 2 begins\nlet levelUpMessage = '';  // To store the level-up message\n\n// Dialogues\nlet dialogues = [\n    \"Welcome to Soul!\"\n];\n\nlet currentDialogueIndex = 0;\nlet gameStarted = false; // Flag to check if game has started\nlet gameOver = false; // Flag for the game over screen\n\n// Listen for spacebar key press to move to next dialogue\ndocument.addEventListener('keydown', (e) => {\n    if (e.key === 'ArrowRight') keys.right = true;\n    if (e.key === 'ArrowLeft') keys.left = true;\n    if (e.key === 'ArrowUp' && !player.jumping && player.grounded) {\n        player.speedY = JUMP_STRENGTH;\n        player.jumping = true;\n        player.grounded = false;\n    }\n    if (e.key === ' ') { // Spacebar to move to the next dialogue\n        if (gameStarted) {\n            return; // Game has started, ignore space\n        } else {\n            currentDialogueIndex++;\n            if (currentDialogueIndex >= dialogues.length) {\n                gameStarted = true; // End of dialogues, start the game\n                update(); // Start the game loop\n            }\n        }\n    }\n\n    if (e.key === 's') {\n        keys.swing = true; // Player presses 'S' to swing the sword\n    }\n\n    if (gameOver) {\n        if (e.key === 'r') {\n            resetGame(); // Restart the game when 'R' is pressed\n        } else if (e.key === 'q') {\n            window.location.reload(); // Reload the page to quit the game\n        }\n    }\n});\n\ndocument.addEventListener('keyup', (e) => {\n    if (e.key === 'ArrowRight') keys.right = false;\n    if (e.key === 'ArrowLeft') keys.left = false;\n    if (e.key === 's') {\n        keys.swing = false; // Stop swinging sword when 'S' is released\n    }\n});\n\n// Update game loop\nfunction update() {\n    if (!gameStarted || gameOver) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas\n        if (gameOver) {\n            drawGameOverScreen(); // Show game over screen\n        } else {\n            drawDialogue();  // Draw dialogue text if the game hasn't started yet\n        }\n        return;\n    }\n\n    // Handle movement\n    if (keys.right) player.speedX += 0.5;\n    if (keys.left) player.speedX -= 0.5;\n\n    player.speedX *= FRICTION;\n    player.x += player.speedX;\n    player.y += player.speedY;\n\n    // Update distance traveled\n    distanceTraveled = (player.x - 100) / 100;\n\n    // Trigger level-up when the player reaches 100 meters\n    if (distanceTraveled >= LEVEL_UP_DISTANCE && level === 1) {\n        levelUp();\n    }\n\n    if (player.y + player.height < canvas.height) {\n        player.speedY += GRAVITY;\n    } else {\n        player.y = canvas.height - player.height;\n        player.speedY = 0;\n        player.jumping = false;\n        player.grounded = true;\n    }\n\n    // Platform collision detection\n    platforms.forEach(platform => {\n        if (player.y + player.height <= platform.y && player.y + player.height + player.speedY >= platform.y) {\n            if (player.x + player.width > platform.x && player.x < platform.x + platform.width) {\n                player.y = platform.y - player.height;\n                player.speedY = 0;\n                player.jumping = false;\n                player.grounded = true;\n            }\n        }\n    });\n\n    // Handle sword swinging logic\n    if (keys.swing) {\n        player.swordSwinging = true;\n    } else {\n        player.swordSwinging = false;\n    }\n\n    if (player.swordSwinging) {\n        player.swordAngle += 5 * player.swordDirection; // Increment sword angle to simulate swinging\n        if (player.swordAngle >= 45) { // If it reaches the max swing angle, reverse direction\n            player.swordDirection = -1;\n        } else if (player.swordAngle <= -175) { // If it goes past the other side, reverse direction\n            player.swordDirection = 1;\n        }\n    }\n\n    // Check if player falls below the red line\n    if (player.y + player.height > canvas.height - 10) {\n        resetPlayer();\n    }\n\n    // Update attack objects (adjusted by difficulty multiplier)\n    attackObjects.forEach((attackObject, index) => {\n        if (isCollidingWithSword(player, attackObject)) {\n            attackObjects.splice(index, 1); // Remove attack object when hit by sword\n        }\n        if (isColliding(player, attackObject)) {\n            showFailScreen();\n            resetGame();\n        }\n        moveTowardPlayer(attackObject, attackSpeedMultiplier);\n    });\n\n    // Spawn attack objects (adjusted by spawn rate multiplier)\n    if (attackObjects.length < MAX_ATTACK_OBJECTS * spawnRateMultiplier && Math.random() < 0.005) {\n        createAttackObject();\n    }\n\n    // Scroll platforms and camera\n    if (player.x > canvas.width / 2) {\n        camera.x += player.speedX;\n        spawnPlatforms();\n        cleanUpPlatforms();\n    }\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);  // Clear the canvas every frame\n\n    // Fill the background with the current color\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw the red line at the bottom of the canvas\n    ctx.fillStyle = 'red';\n    ctx.fillRect(0, canvas.height - 10, canvas.width, 10);  // The red line\n\n    // Draw platforms, attack objects, and player\n    drawPlatforms();      // Draw all the platforms\n    drawAttackObjects();  // Draw attack objects (e.g., red blocks)\n    drawPlayer();         // Draw the player\n    drawSword();          // Draw the sword as it swings\n\n    // Display level-up message if applicable\n    if (levelUpMessage) {\n        drawLevelUpMessage(levelUpMessage);\n    }\n\n    // Display the distance traveled in meters (top-right corner)\n    drawDistanceTraveled();\n\n    requestAnimationFrame(update);  // Continue the game loop\n}\n\n// Function to draw the current dialogue\nfunction drawDialogue() {\n    ctx.fillStyle = 'white';  // Color of the text\n    ctx.font = '20px Arial';  // Font style\n    ctx.textAlign = 'center';  // Center the text horizontally\n    ctx.fillText(dialogues[currentDialogueIndex], canvas.width / 2, canvas.height / 2);  // Draw dialogue text\n\n    // Display \"Press Space to continue\" if there's another dialogue\n    if (currentDialogueIndex < dialogues.length - 1) {\n        ctx.font = '16px Arial';  // Smaller font for the continue prompt\n        ctx.fillText('the soul must save its companion in the valley', canvas.width / 2, canvas.height / 2 + 40);\n        ctx.fillText('if you are scared press s', canvas.width / 2, canvas.height / 2 + 70);\n        ctx.fillText('press spacebar to enter', canvas.width / 2, canvas.height / 2 + 120);\n    } else {\n        // If it's the last dialogue, display \"Press Space to Start\"\n        ctx.fillText('the soul must save its companion in the valley', canvas.width / 2, canvas.height / 2 + 40);\n        ctx.fillText('if you are scared press s', canvas.width / 2, canvas.height / 2 + 120);\n        ctx.fillText('press spacebar to enter', canvas.width / 2, canvas.height / 2 + 170);\n        ctx.fillText('tread carefully', canvas.width / 2, canvas.height / 2 + 85);\n    }\n}\n\n// Function to draw the player (character)\nfunction drawPlayer() {\n    ctx.fillStyle = player.color;  // Player color\n    ctx.fillRect(player.x - camera.x, player.y, player.width, player.height);  // Draw the player\n}\n\n// Function to draw the sword (stick)\nfunction drawSword() {\n    ctx.save();\n\n    // Move the origin to the player's center (to make rotating around player easier)\n    ctx.translate(player.x + player.width / 2 - camera.x, player.y + player.height / 2);\n\n    // Rotate the sword based on player swing angle\n    ctx.rotate(player.swordAngle * Math.PI / 180);\n\n    // Draw the sword (stick)\n    ctx.fillStyle = 'gray';\n    ctx.fillRect(15, -2, 50, 10);  // Draw the sword\n\n    ctx.restore();\n}\n\n// Function to draw platforms\nfunction drawPlatforms() {\n    ctx.fillStyle = 'white';  // Platform color\n    platforms.forEach(platform => {\n        ctx.fillRect(platform.x - camera.x, platform.y, platform.width, platform.height);  // Draw each platform\n    });\n}\n\n// Function to draw attack objects\nfunction drawAttackObjects() {\n    ctx.fillStyle = 'red';  // Color for attack objects\n    attackObjects.forEach(attackObject => {\n        ctx.fillRect(attackObject.x - camera.x, attackObject.y, attackObject.width, attackObject.height);\n    });\n}\n\n// Function to draw the level-up message\nfunction drawLevelUpMessage(message) {\n    ctx.fillStyle = 'yellow';  // Color of the level-up message\n    ctx.font = '30px Arial';  // Font size\n    ctx.fillText(message, canvas.width / 2 - 100, canvas.height / 2);  // Display message\n}\n\n// Function to draw the game over screen\nfunction drawGameOverScreen() {\n    ctx.fillStyle = 'white';\n    ctx.font = '40px Arial';\n    ctx.fillText(\"Game Over\", canvas.width / 2 - 100, canvas.height / 2 - 40);\n\n    ctx.font = '20px Arial';\n    ctx.fillText(\"Press R to Restart or Q to Quit\", canvas.width / 2 - 140, canvas.height / 2 + 40);\n}\n\n// Collision detection function\nfunction isColliding(player, object) {\n    return (\n        player.x + player.width > object.x &&\n        player.x < object.x + object.width &&\n        player.y + player.height > object.y &&\n        player.y < object.y + object.height\n    );\n}\n\n// Collision detection with sword\nfunction isCollidingWithSword(player, object) {\n    let swordHitBox = {\n        x: player.x + player.width / 2,  // Starting position of sword\n        y: player.y + player.height / 2,\n        width: 50,\n        height: 10\n    };\n\n    // Consider sword's rotation and swing\n    const swordSwingDistance = 50;\n    const swordAngle = player.swordAngle * Math.PI / 180;\n    let swordEndX = swordHitBox.x + swordSwingDistance * Math.cos(swordAngle);\n    let swordEndY = swordHitBox.y + swordSwingDistance * Math.sin(swordAngle);\n\n    // Create a temporary rectangle based on sword swing to check for collision\n    let swordRect = {\n        x: Math.min(swordHitBox.x, swordEndX) - 25,\n        y: Math.min(swordHitBox.y, swordEndY) - 5,\n        width: Math.abs(swordEndX - swordHitBox.x) + 10,\n        height: Math.abs(swordEndY - swordHitBox.y) + 10\n    };\n\n    return isColliding(swordRect, object);\n}\n\n// Create attack objects\nfunction createAttackObject() {\n    attackObjects.push({\n        x: player.x + SPAWN_DISTANCE + Math.random() * SPAWN_DISTANCE,\n        y: player.y - 50 + Math.random() * 100,\n        width: 40,\n        height: 40\n    });\n}\n\n// Move attack objects toward player\nfunction moveTowardPlayer(attackObject, speedMultiplier) {\n    let dx = player.x - attackObject.x;\n    let dy = player.y - attackObject.y;\n    let distance = Math.sqrt(dx * dx + dy * dy);\n    attackObject.x += (dx / distance) * 2 * speedMultiplier;\n    attackObject.y += (dy / distance) * 2 * speedMultiplier;\n}\n\n// Level up and difficulty increase\nfunction levelUp() {\n    level++;\n    WIN_DISTANCE += 50;\n\n    // Adjust difficulty for level 2\n    if (level === 2) {\n        attackSpeedMultiplier = 1.5;\n        spawnRateMultiplier = 1.2;\n        levelUpMessage = \"Level 2! Attack Speed Increased!\";\n        backgroundColor = 'blue';  // Change background color to blue for level 2\n    }\n}\n\n// Reset player position\nfunction resetPlayer() {\n    player.x = 100;\n    player.y = canvas.height - 200;\n    player.speedX = 0;\n    player.speedY = 0;\n    attackObjects = [];\n    distanceTraveled = 0;\n}\n\n// Reset the game\nfunction resetGame() {\n    player.x = 100;\n    player.y = canvas.height - 200;\n    player.speedX = 0;\n    player.speedY = 0;\n    platforms = [{ x: 0, y: canvas.height - 50, width: canvas.width, height: 50 }];\n    attackObjects = [];\n    distanceTraveled = 0;\n    level = 1;\n    levelUpMessage = '';\n    currentDialogueIndex = 0;\n    gameStarted = false;\n    gameOver = false;\n    backgroundColor = 'black'; // Reset background color\n    update();\n}\n\n// Show the fail screen\nfunction showFailScreen() {\n    ctx.fillStyle = 'red';\n    ctx.font = '40px Arial';\n    ctx.fillText(\"You Failed!\", canvas.width / 2 - 100, canvas.height / 2);\n}\n\n// Spawn new platforms\nfunction spawnPlatforms() {\n    if (player.x > platforms[platforms.length - 1].x + PLATFORM_GAP) {\n        platforms.push({\n            x: platforms[platforms.length - 1].x + PLATFORM_GAP,\n            y: canvas.height - (Math.random() * 100 + 50),\n            width: PLATFORM_WIDTH,\n            height: PLATFORM_HEIGHT\n        });\n    }\n}\n\n// Clean up platforms\nfunction cleanUpPlatforms() {\n    if (platforms[0].x + PLATFORM_WIDTH < player.x - camera.x) {\n        platforms.shift();\n    }\n}\n\n// Draw the distance traveled\nfunction drawDistanceTraveled() {\n    ctx.fillStyle = 'white';\n    ctx.font = '20px Arial';\n    ctx.textAlign = 'right';\n    ctx.fillText(`where is he: ${Math.floor(distanceTraveled)} maybe`, canvas.width - 10, 30);  // Display distance in top-right\n}\n\n// Show the first dialogue screen\nfunction startDialogues() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawDialogue();\n}\n\n// Start the game and show dialogues\nstartDialogues();\n",
      "status": "[12]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}