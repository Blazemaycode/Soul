Html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Platformer Game</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: white;
        }
        canvas {
            border: 1px solid black;
            background-color: black;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="800" height="600"></canvas>
    <script src="game.js"></script>
</body>
</html>



Css:


#gamecanvas { 
    border: 5px solid black;
    position: absolute;
    top: 50%;
    left: 5%;
    transform: translate(-50%, -50%);
    width: 600px;
    height: 600px;


JavaScript:




const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// Game settings
const GRAVITY = 0.8;
const FRICTION = 0.9;
const JUMP_STRENGTH = -25;
const PLATFORM_GAP = 300;
const PLATFORM_WIDTH = 200;
const PLATFORM_HEIGHT = 20;
const SPAWN_DISTANCE = 800;
const ATTACK_RANGE = 80;
const MAX_ATTACK_OBJECTS = 5; // Limit the number of attack objects on screen

// Variables that change during the game
let WIN_DISTANCE = 100;  // The distance at which the level increases (should be mutable)
let attackSpeedMultiplier = 1;  // Level 1 default attack speed multiplier
let spawnRateMultiplier = 1;    // Level 1 default spawn rate multiplier
let backgroundColor = 'black'; // Initial background color

// Game objects
const player = {
    x: 100,
    y: canvas.height - 200,
    width: 50,
    height: 50,
    speedX: 0,
    speedY: 0,
    color: 'white',
    jumping: false,
    grounded: false,
    swordAngle: 0, // Angle for sword swing
    swordSwinging: false, // Is the sword currently swinging
    swordDirection: 1 // 1 for right, -1 for left (direction of swing)
};

let platforms = [
    { x: 0, y: canvas.height - 50, width: canvas.width, height: 50 },
    { x: 200, y: canvas.height - 150, width: PLATFORM_WIDTH, height: PLATFORM_HEIGHT },
    { x: 500, y: canvas.height - 250, width: PLATFORM_WIDTH, height: PLATFORM_HEIGHT }
];

let attackObjects = []; // Array to store attack objects

const camera = {
    x: 0,
    y: 0,
    width: canvas.width,
    height: canvas.height,
    speedX: 0
};

let level = 1;
let distanceTraveled = 0;
let keys = { right: false, left: false, up: false, swing: false };

// Difficulty adjustments
const LEVEL_UP_DISTANCE = 100; // Distance at which level 2 begins
let levelUpMessage = '';  // To store the level-up message

// Dialogues
let dialogues = [
    "welcome to soul, press s to swing your soul sword, spacebar to cont.", 
];

let currentDialogueIndex = 0;
let gameStarted = false; // Flag to check if game has started
let gameOver = false; // Flag for the game over screen

// Listen for spacebar key press to move to next dialogue
document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowRight') keys.right = true;
    if (e.key === 'ArrowLeft') keys.left = true;
    if (e.key === 'ArrowUp' && !player.jumping && player.grounded) {
        player.speedY = JUMP_STRENGTH;
        player.jumping = true;
        player.grounded = false;
    }
    if (e.key === ' ') { // Spacebar to move to the next dialogue
        if (gameStarted) {
            return; // Game has started, ignore space
        } else {
            currentDialogueIndex++;
            if (currentDialogueIndex >= dialogues.length) {
                gameStarted = true; // End of dialogues, start the game
                update(); // Start the game loop
            }
        }
    }

    if (e.key === 's') {
        keys.swing = true; // Player presses 'S' to swing the sword
    }

    if (gameOver) {
        if (e.key === 'r') {
            resetGame(); // Restart the game when 'R' is pressed
        } else if (e.key === 'q') {
            window.location.reload(); // Reload the page to quit the game
        }
    }
});

document.addEventListener('keyup', (e) => {
    if (e.key === 'ArrowRight') keys.right = false;
    if (e.key === 'ArrowLeft') keys.left = false;
    if (e.key === 's') {
        keys.swing = false; // Stop swinging sword when 'S' is released
    }
});

// Update game loop
function update() {
    if (!gameStarted || gameOver) {
        ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas
        if (gameOver) {
            drawGameOverScreen(); // Show game over screen
        } else {
            drawDialogue();  // Draw dialogue text if the game hasn't started yet
        }
        return;
    }

    // Handle movement
    if (keys.right) player.speedX += 0.5;
    if (keys.left) player.speedX -= 0.5;

    player.speedX *= FRICTION;
    player.x += player.speedX;
    player.y += player.speedY;

    // Update distance traveled
    distanceTraveled = (player.x - 100) / 100;

    // Trigger level-up when the player reaches 100 meters
    if (distanceTraveled >= LEVEL_UP_DISTANCE && level === 1) {
        levelUp();
    }

    if (player.y + player.height < canvas.height) {
        player.speedY += GRAVITY;
    } else {
        player.y = canvas.height - player.height;
        player.speedY = 0;
        player.jumping = false;
        player.grounded = true;
    }

    // Platform collision detection
    platforms.forEach(platform => {
        if (player.y + player.height <= platform.y && player.y + player.height + player.speedY >= platform.y) {
            if (player.x + player.width > platform.x && player.x < platform.x + platform.width) {
                player.y = platform.y - player.height;
                player.speedY = 0;
                player.jumping = false;
                player.grounded = true;
            }
        }
    });

    // Handle sword swinging logic
    if (keys.swing) {
        player.swordSwinging = true;
    } else {
        player.swordSwinging = false;
    }

    if (player.swordSwinging) {
        player.swordAngle += 5 * player.swordDirection; // Increment sword angle to simulate swinging
        if (player.swordAngle >= 45) { // If it reaches the max swing angle, reverse direction
            player.swordDirection = -1;
        } else if (player.swordAngle <= -45) { // If it goes past the other side, reverse direction
            player.swordDirection = 1;
        }
    }

    // Check if player falls below the red line
    if (player.y + player.height > canvas.height - 10) {
        resetPlayer();
    }

    // Update attack objects (adjusted by difficulty multiplier)
    attackObjects.forEach((attackObject, index) => {
        if (isCollidingWithSword(player, attackObject)) {
            attackObjects.splice(index, 1); // Remove attack object when hit by sword
        }
        if (isColliding(player, attackObject)) {
            showFailScreen();
            resetGame();
        }
        moveTowardPlayer(attackObject, attackSpeedMultiplier);
    });

    // Spawn attack objects (adjusted by spawn rate multiplier)
    if (attackObjects.length < MAX_ATTACK_OBJECTS * spawnRateMultiplier && Math.random() < 0.005) {
        createAttackObject();
    }

    // Scroll platforms and camera
    if (player.x > canvas.width / 2) {
        camera.x += player.speedX;
        spawnPlatforms();
        cleanUpPlatforms();
    }

    ctx.clearRect(0, 0, canvas.width, canvas.height);  // Clear the canvas every frame

    // Fill the background with the current color
    ctx.fillStyle = backgroundColor;
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Draw the red line at the bottom of the canvas
    ctx.fillStyle = 'red';
    ctx.fillRect(0, canvas.height - 10, canvas.width, 10);  // The red line

    // Draw platforms, attack objects, and player
    drawPlatforms();      // Draw all the platforms
    drawAttackObjects();  // Draw attack objects (e.g., red blocks)
    drawPlayer();         // Draw the player
    drawSword();          // Draw the sword as it swings

    // Display level-up message if applicable
    if (levelUpMessage) {
        drawLevelUpMessage(levelUpMessage);
    }

    requestAnimationFrame(update);  // Continue the game loop
}

// Function to draw the current dialogue
function drawDialogue() {
    ctx.fillStyle = 'white';  // Color of the text
    ctx.font = '20px Arial';  // Font style
    ctx.textAlign = 'center';  // Center the text horizontally
    ctx.fillText(dialogues[currentDialogueIndex], canvas.width / 2, canvas.height / 2);  // Draw dialogue text
}

// Function to draw the player (character)
function drawPlayer() {
    ctx.fillStyle = player.color;  // Player color
    ctx.fillRect(player.x - camera.x, player.y, player.width, player.height);  // Draw the player
}

// Function to draw the sword (stick)
function drawSword() {
    ctx.save();

    // Move the origin to the player's center (to make rotating around player easier)
    ctx.translate(player.x + player.width / 2 - camera.x, player.y + player.height / 2);

    // Rotate the sword based on player swing angle
    ctx.rotate(player.swordAngle * Math.PI / 180);

    // Draw the sword (stick)
    ctx.fillStyle = 'gray';
    ctx.fillRect(0, -5, 50, 10);  // Draw the sword

    ctx.restore();
}

// Function to draw platforms
function drawPlatforms() {
    ctx.fillStyle = 'white';  // Platform color
    platforms.forEach(platform => {
        ctx.fillRect(platform.x - camera.x, platform.y, platform.width, platform.height);  // Draw each platform
    });
}

// Function to draw attack objects
function drawAttackObjects() {
    ctx.fillStyle = 'red';  // Color for attack objects
    attackObjects.forEach(attackObject => {
        ctx.fillRect(attackObject.x - camera.x, attackObject.y, attackObject.width, attackObject.height);
    });
}

// Function to draw the level-up message
function drawLevelUpMessage(message) {
    ctx.fillStyle = 'yellow';  // Color of the level-up message
    ctx.font = '30px Arial';  // Font size
    ctx.fillText(message, canvas.width / 2 - 100, canvas.height / 2);  // Display message
}

// Function to draw the game over screen
function drawGameOverScreen() {
    ctx.fillStyle = 'white';
    ctx.font = '40px Arial';
    ctx.fillText("Game Over", canvas.width / 2 - 100, canvas.height / 2 - 40);

    ctx.font = '20px Arial';
    ctx.fillText("Press R to Restart or Q to Quit", canvas.width / 2 - 140, canvas.height / 2 + 40);
}

// Collision detection function
function isColliding(player, object) {
    return (
        player.x + player.width > object.x &&
        player.x < object.x + object.width &&
        player.y + player.height > object.y &&
        player.y < object.y + object.height
    );
}

// Collision detection with sword
function isCollidingWithSword(player, object) {
    let swordHitBox = {
        x: player.x + player.width / 2,  // Starting position of sword
        y: player.y + player.height / 2,
        width: 50,
        height: 10
    };

    // Consider sword's rotation and swing
    const swordSwingDistance = 50;
    const swordAngle = player.swordAngle * Math.PI / 180;
    let swordEndX = swordHitBox.x + swordSwingDistance * Math.cos(swordAngle);
    let swordEndY = swordHitBox.y + swordSwingDistance * Math.sin(swordAngle);

    // Create a temporary rectangle based on sword swing to check for collision
    let swordRect = {
        x: Math.min(swordHitBox.x, swordEndX) - 25,
        y: Math.min(swordHitBox.y, swordEndY) - 5,
        width: Math.abs(swordEndX - swordHitBox.x) + 10,
        height: Math.abs(swordEndY - swordHitBox.y) + 10
    };

    return isColliding(swordRect, object);
}

// Create attack objects
function createAttackObject() {
    attackObjects.push({
        x: player.x + SPAWN_DISTANCE + Math.random() * SPAWN_DISTANCE,
        y: player.y - 50 + Math.random() * 100,
        width: 40,
        height: 40
    });
}

// Move attack objects toward player
function moveTowardPlayer(attackObject, speedMultiplier) {
    let dx = player.x - attackObject.x;
    let dy = player.y - attackObject.y;
    let distance = Math.sqrt(dx * dx + dy * dy);
    attackObject.x += (dx / distance) * 2 * speedMultiplier;
    attackObject.y += (dy / distance) * 2 * speedMultiplier;
}

// Level up and difficulty increase
function levelUp() {
    level++;
    WIN_DISTANCE += 50;

    // Adjust difficulty for level 2
    if (level === 2) {
        attackSpeedMultiplier = 1.5;
        spawnRateMultiplier = 1.2;
        levelUpMessage = "Level 2! Attack Speed Increased!";
        backgroundColor = 'blue';  // Change background color to blue for level 2
    }
}

// Reset player position
function resetPlayer() {
    player.x = 100;
    player.y = canvas.height - 200;
    player.speedX = 0;
    player.speedY = 0;
    attackObjects = [];
    distanceTraveled = 0;
}

// Reset the game
function resetGame() {
    player.x = 100;
    player.y = canvas.height - 200;
    player.speedX = 0;
    player.speedY = 0;
    platforms = [{ x: 0, y: canvas.height - 50, width: canvas.width, height: 50 }];
    attackObjects = [];
    distanceTraveled = 0;
    level = 1;
    levelUpMessage = '';
    currentDialogueIndex = 0;
    gameStarted = false;
    gameOver = false;
    backgroundColor = 'black'; // Reset background color
    update();
}

// Show the fail screen
function showFailScreen() {
    ctx.fillStyle = 'red';
    ctx.font = '40px Arial';
    ctx.fillText("You Failed!", canvas.width / 2 - 100, canvas.height / 2);
}

// Spawn new platforms
function spawnPlatforms() {
    if (player.x > platforms[platforms.length - 1].x + PLATFORM_GAP) {
        platforms.push({
            x: platforms[platforms.length - 1].x + PLATFORM_GAP,
            y: canvas.height - (Math.random() * 100 + 50),
            width: PLATFORM_WIDTH,
            height: PLATFORM_HEIGHT
        });
    }
}

// Clean up platforms
function cleanUpPlatforms() {
    if (platforms[0].x + PLATFORM_WIDTH < player.x - camera.x) {
        platforms.shift();
    }
}

// Show the first dialogue screen
function startDialogues() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawDialogue();
}

// Start the game and show dialogues
startDialogues();